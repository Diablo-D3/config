set nocompatible

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

syn on
filetype plugin indent on

if has('gui_running')
    set background=dark " set to light if using light scheme
else
    set background=dark
endif

set t_Co=256
let base16colorspace=256
let base16_shell_path="~/config/base16-shell"

colorscheme base16-bright

set sw=8
set ts=8
set sts=8
set backspace=2
set hidden
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
set history=10000
set undofile
set undolevels=10000
set undoreload=10000
set noswapfile
set nobackup
set undofile
set undodir=~/.vim/undo//
set foldenable
set wildmenu
set wildmode=longest,full
set completeopt=longest,menuone
set nomodeline
set mouse+=a
set laststatus=2
set encoding=utf-8
set title
set wrap
set linebreak
set nolist
set virtualedit=onemore

noremap ; :

nnoremap Q <nop>

noremap <silent> <C-r> <C-w>v<cr>
vnoremap <silent> <C-r> <C-o><C-w>v<cr>

vnoremap <silent> <C-x> "+x
vnoremap <silent> <C-c> "+y
map <silent> <C-v> "+gP
cmap <silent> <C-v> <C-r>+
inoremap <silent> <C-v> <C-o>"+gP

noremap <silent> <C-z> u
inoremap <silent> <C-z> <C-o>u

noremap <silent> <Up> gk
noremap <silent> <Down> gj
vnoremap <silent> <Up> gk
vnoremap <silent> <Down> gj

let g:tmux_navigator_no_mappings=1

nmap <silent> <C-h> :TmuxNavigateLeft<cr>
nmap <silent> <C-j> :TmuxNavigateDown<cr>
nmap <silent> <C-k> :TmuxNavigateUp<cr>
nmap <silent> <C-l> :TmuxNavigateRight<cr>
nmap <silent> <C-\> :TmuxNavigatePrevious<cr>
imap <silent> <C-h> <C-o>:TmuxNavigateLeft<cr>
imap <silent> <C-j> <C-o>:TmuxNavigateDown<cr>
imap <silent> <C-k> <C-o>:TmuxNavigateUp<cr>
imap <silent> <C-l> <C-o>:TmuxNavigateRight<cr>
imap <silent> <C-\> <C-o>:TmuxNavigatePrevious<cr>

noremap <silent> hh :split<cr>
noremap <silent> vv :vsplit<cr>

if bufwinnr(1)
    noremap + <C-W>+
    noremap - <C-W>-
endif

au BufWritePre * :%s/\s\+$//e

let g:rainbow_ctermfgs = ['blue', 'red', 'green', 'yellow', 'magenta', 'cyan']
let g:rainbow_guifgs = ['#7cafc2', '#ab4642', '#a1b56c', '#f7ca88', '#ba8baf', '#86c1b9']

au FileType c,cpp,objc,objcpp,perl call rainbow#load()

au BufNewFile,BufRead *.dtl :set ft=htmldjango
au FileType html :set ft=htmldjango

au FileType * :Rooter

let g:syntastic_enable_signs=1
let g:syntastic_check_on_open=0
let g:syntastic_auto_loc_list=1

let g:easytags_by_filetype="~/.vim/tags/"
let g:easytags_updatetime_min=2000

let g:ycm_auto_trigger=0
let g:ycm_allow_changing_updatetime=0
let g:ycm_global_ycm_extra_conf='~/.vim/ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_autoclose_preview_window_after_insertion=1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_left_sep=''
let g:airline_left_alt_step='|'
let g:airline_right_sep=''
let g:airline_symbols.linenr="\u00A7"
let g:airline_symbols.branch=''

noremap <silent> <F1> :CtrlPBuffer<cr>
noremap <silent> <F2> :CtrlP<cr>
noremap <silent> <F3> :CtrlPClearCache<cr>

inoremap <silent> <F1> <C-o>:CtrlPBuffer<cr>
inoremap <silent> <F2> <C-o>:CtrlP<cr>
inoremap <silent> <F3> <C-o>:CtrlPClearCache<cr>

if has("gui_running")
  if has("gui_macvim")
    set guifont=Source\ Code\ Pro\ Light:h16
    set anti
  else
    set guifont=Source\ Code\ Pro\ 12
  endif

  set go-=T
  set go-=m
  set go+=LlRrb
  set go-=LlRrb
  set t_md=
  set nomousehide
else
  if &term =~ '^screen'
    set ttymouse=xterm2
  endif
endif

" 80 column highlight on demand
call matchadd('ColorColumn', '\%80v', 100)

" handle pgp encrypted files
augroup pgp
  au!
  autocmd BufReadPre,FileReadPre *.gpg set viminfo=
  autocmd BufReadPre,FileReadPre *.gpg set noswapfile noundofile nobackup
  autocmd BufReadPre,FileReadPre *.gpg set bin
  autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null
  autocmd BufReadPost,FileReadPost *.gpg set nobin
  autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
  autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
  autocmd BufWritePost,FileWritePost *.gpg u
augroup END

