""" Load plugins
set nocompatible

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()

""" UI and colors
syn on
au Syntax * syn sync maxlines=999999999
au Syntax * syn sync minlines=999999999

if has('gui_running')
	" Set to light if using light scheme
	set background=dark
else
	set background=dark
endif

set t_Co=256
let base16colorspace=256
let base16_shell_path="~/config/base16-shell"

colorscheme base16-bright

call matchadd('ColorColumn', '\%80v', 100)

if has("gui_running")
	if has("gui_macvim")
	set guifont=Source\ Code\ Pro\ Light:h16
	set anti
	else
	set guifont=Source\ Code\ Pro\ 12
	endif

	" Remove menubar and toolbar
	set go-=mT

	" Remove scrollbars
	set go+=LlRrb
	set go-=LlRrb

	" Turn bold off
	set t_md=

	" Do not hide cursor when in insert
	set nomousehide
else
	if &term =~ '^screen'
	set ttymouse=xterm2
	endif
endif

" Don't tell me I haven't written changes
set hidden

" Turn off errorbells and visualbells
set noeb vb t_vb=
au GUIEnter * set vb t_vb=

" Don't flash cursor at matching paren
set noshowmatch

""" Tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
filetype plugin indent on

""" Search and replace
set incsearch
set hlsearch
set ignorecase
set smartcase
set gdefault

""" History and undo
set history=10000
set undofile
set undolevels=10000
set undoreload=10000
set noswapfile
set nobackup
set undofile
set undodir=~/.vim/undo//


set foldenable
set wildmenu
set wildmode=longest,full
set completeopt=longest,menuone
set nomodeline
set mouse+=a
set laststatus=2
set encoding=utf-8
set title
set wrap
set linebreak
set nolist
set virtualedit=onemore

""" Bindings
set backspace=2

noremap ; :

nnoremap Q <nop>

noremap <silent> <C-r> <C-w>v<cr>
vnoremap <silent> <C-r> <C-o><C-w>v<cr>

vnoremap <silent> <C-x> "+x
vnoremap <silent> <C-c> "+y
map <silent> <C-v> "+gP
cmap <silent> <C-v> <C-r>+
inoremap <silent> <C-v> <C-o>"+gP

noremap <silent> <C-z> u
inoremap <silent> <C-z> <C-o>u

noremap <silent> <Up> gk
noremap <silent> <Down> gj
vnoremap <silent> <Up> gk
vnoremap <silent> <Down> gj

let g:tmux_navigator_no_mappings=1

nmap <silent> <C-h> :TmuxNavigateLeft<cr>
nmap <silent> <C-j> :TmuxNavigateDown<cr>
nmap <silent> <C-k> :TmuxNavigateUp<cr>
nmap <silent> <C-l> :TmuxNavigateRight<cr>
nmap <silent> <C-\> :TmuxNavigatePrevious<cr>
imap <silent> <C-h> <C-o>:TmuxNavigateLeft<cr>
imap <silent> <C-j> <C-o>:TmuxNavigateDown<cr>
imap <silent> <C-k> <C-o>:TmuxNavigateUp<cr>
imap <silent> <C-l> <C-o>:TmuxNavigateRight<cr>
imap <silent> <C-\> <C-o>:TmuxNavigatePrevious<cr>

noremap <silent> hh :split<cr>
noremap <silent> vv :vsplit<cr>

if bufwinnr(1)
	noremap + <C-W>+
	noremap - <C-W>-
endif

au BufWritePre * :%s/\s\+$//e

au BufNewFile,BufRead *.dtl :set ft=htmldjango
au FileType html :set ft=htmldjango

au FileType * :Rooter

let g:syntastic_enable_signs=1
let g:syntastic_check_on_open=0
let g:syntastic_auto_loc_list=1

let g:easytags_by_filetype='~/.vim/tags/'
let g:easytags_updatetime_min=2000
let g:easytags_suppress_ctags_warning=1

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_left_sep=''
let g:airline_left_alt_step='|'
let g:airline_right_sep=''
let g:airline_symbols.linenr="\u00A7"
let g:airline_symbols.branch=''

let g:ctrlp_custom_ignore={
	\ 'dir': '\v[\/](bower_components|node_modules|dist)$',
	\ 'file': '\v\.(so|jar)$'
\}

noremap <silent> <F1> :CtrlPBuffer<cr>
noremap <silent> <F2> :CtrlP<cr>
noremap <silent> <F3> :CtrlPClearCache<cr>

inoremap <silent> <F1> <C-o>:CtrlPBuffer<cr>
inoremap <silent> <F2> <C-o>:CtrlP<cr>
inoremap <silent> <F3> <C-o>:CtrlPClearCache<cr>

" handle pgp encrypted files
augroup pgp
	au!
	autocmd BufReadPre,FileReadPre *.gpg set viminfo=
	autocmd BufReadPre,FileReadPre *.gpg set noswapfile noundofile nobackup
	autocmd BufReadPre,FileReadPre *.gpg set bin
	autocmd BufReadPre,FileReadPre *.gpg let ch_save = &ch|set ch=2
	autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null
	autocmd BufReadPost,FileReadPost *.gpg set nobin
	autocmd BufReadPost,FileReadPost *.gpg let &ch = ch_save|unlet ch_save
	autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")
	autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
	autocmd BufWritePost,FileWritePost *.gpg u
augroup END

